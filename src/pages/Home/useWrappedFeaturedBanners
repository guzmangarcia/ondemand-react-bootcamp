import { useState, useEffect } from 'react';

//import useFeaturedBanners  from '../utils/hooks/useFeaturedBanners';
//import useFeaturedProducts from '../utils/hooks/useFeaturedProducts';
//import useProductCategories from  '../utils/hooks/useProductCategories';

import useFeaturedBanners from '../../utils/hooks-mooks/useFeaturedBanners';
//import useFeaturedProducts from '../../utils/hooks-mooks/useFeaturedProducts';
//import useProductCategories from '../../utils/hooks-mooks/useProductCategories';

import useFeaturedBannersMock from '../../mocks/en-us/featured-banners.json';;

export default function useWrappedFeaturedBanners() {

//     const { data: bannerData, isLoading } = useFeaturedBanners();
//     const [wrappedData, setWrappedData] = useState(()=>({
//         bannerData: {},
//         isBannerLoading: isLoading,
//     }));

//     const [featuredBanners, setFeaturedBanners] = useState(() => ({
//         data: {},
//         isLoading: true,
//       }));

//     useEffect(() => {
//         let bannerDataItems = [];
//         if (bannerData.results !== undefined) {

//             // console.log(bannerData.results)
//             bannerDataItems = bannerData.results.map((row, index) => {
//                 return {
//                     id: index + 1,
//                     src: row.data.main_image.url,
//                     alt: 'banner products!',
//                     text: 'banner products!'
//                 };
//             });
//             setWrappedData({
//                 bannerData: bannerDataItems,
//                 isBannerLoading: isLoading,

//             });
            
//         }

//     }, [wrappedData, bannerData, isLoading]);

//     return wrappedData;


const [featuredBanners, setFeaturedBanners] = useState(() => ({
    data: {},
    isLoading: true,
  }));

 useEffect(() => {

    const controller = new AbortController();

    async function getFeaturedBanners() {
      try {
        setFeaturedBanners({ data: {}, isLoading: true });

        const data = useFeaturedBannersMock;

        setFeaturedBanners({ data, isLoading: false });
      } catch (err) {
        setFeaturedBanners({ data: {}, isLoading: false });
        console.error(err);
      }
    }

    getFeaturedBanners();

    return () => {
      controller.abort();
    };
  }, []);
}